https://codeforces.com/contest/1969/problem/C    -->good one for dp states , as i previously thought of only dp(i) in terms of dp(i-1)
https://codeforces.com/contest/940/problem/E?mobile=false  --> good dp greedy , where u need to see that n/c min leements were taken , so observation is needed
that only size of 1 ans c are taken into consideration 

https://codeforces.com/contest/1509/problem/C  --> greedy way here dp , 
first can think of greedy way how answer can come in genral in dp  ,then apply some dp methods for time complexity 
  
https://codeforces.com/problemset/problem/474/D--> nice way for total permuatation  (with 0 in group of k) can exist only 

https://codeforces.com/contest/1974/problem/E    --> good one on knapsack 2 dp , also 

--> dp correctness can be checked like this 

check if it correct for i=1 
then also at 2 
so by induction , true for all 
here , total cost is check for a single day ---> 
now if it is also checked true for 2nd day  ---> then by induction true for all 


https://atcoder.jp/contests/dp/tasks/dp_m    -> dp prefix sum required  (candies)
https://atcoder.jp/contests/dp/tasks/dp_k    ---> dp games (stone)

https://codeforces.com/contest/1081/problem/C   --->combinatroics dp
Soln---->
 — f(i, j) is the number of ways of colouring i bricks with j bricks having a different colour to it's neighbour.

There are two options for the i-th brick.

Case 1 — It is the same colour as the (i — 1)th brick. In that case, f(i, j) += f(i — 1, j)

Case 2 — It is a different colour. Then the number of bricks with different colour increases from j to j + 1. And there are (m — 1) ways to colour this brick.

So, f(i, j + 1) += (m — 1)f(i — 1, j)


Combinational---->
Also, there is a possibly easier solution. We can first choose the bricks of a different color from its left and then 
choose a different color to color them, so the answer can be found to be simply . (n-1 Ck) *m*(m-1)^k

https://codeforces.com/contest/1359/problem/D --> max subbaray sum nice extension where 
ans=max(ans,curr-best) ---> prefix sum from [1...i] and best in min prefix sum from [1...j] where j<i

https://codeforces.com/problemset/problem/1155/D   -> similar extension to max subarray sum 


